  # Print "rich="
movq $1, %rax            # syscall number for sys_write
movq $1, %rdi            # file descriptor (stdout)
lea rich_label(%rip), %rsi   # address of rich_label
movq $5, %rdx            # number of bytes to write (length of "rich=")
syscall                 # make the syscall to print "rich="

# Convert rich to string
movl rich, %eax          # move rich value to %eax
movq $rich_buf + 20, %rsi   # point to the end of the buffer
movb $0, (%rsi)          # null-terminate the string

convert_num_to_str:
    dec %rsi              # move pointer backwards
    movl $10, %ecx        # base 10
    xor %edx, %edx        # clear %edx for division
    div %ecx              # divide %eax by 10
    addb $'0', %dl        # convert remainder to ASCII
    movb %dl, (%rsi)      # store character in buffer
    test %eax, %eax       # check if quotient is zero
    jnz convert_num_to_str # loop if quotient is not zero

# Print the value of 'rich'
movq $1, %rax            # syscall number for sys_write
movq $1, %rdi            # file descriptor (stdout)
movq %rsi, %rsi          # address of the string
movq $rich_buf + 20, %rdx   # calculate the string length
sub %rsi, %rdx           # calculate the string length
syscall                 # make the syscall to print rich

# Print a newline
movq $1, %rax            # syscall number for sys_write
movq $1, %rdi            # file descriptor (stdout)
lea newline(%rip), %rsi  # address of newline character
movq $1, %rdx            # number of bytes to write (1 byte for newline)
syscall                  # make the syscall to print newline

# Exit the program
mov $60, %rax            # syscall number for sys_exit
xor %rdi, %rdi           # exit status (0 for success)
syscall                  # make the syscall to exit the program

.section .rodata
rich_label:
    .asciz "rich="
newline:
    .byte 10               # ASCII code for newline ('\n')

.section .data
rich_buf:
    .skip 20               # Allocate space for rich's ASCII representation
